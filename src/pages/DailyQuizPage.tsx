/**
 * DailyQuizPage Component
 * 
 * Purpose: Daily AI-generated quiz interface for student assessment
 * Features:
 * - AI-generated questions based on curriculum and student progress
 * - Real-time scoring and instant feedback
 * - Step-by-step solutions after completion
 * - Progress tracking and performance analytics
 * - Mobile-optimized quiz interface with touch-friendly controls
 */

import { useState, useEffect } from "react";
import { MobileHeader } from "@/components/layout/MobileHeader";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { 
  CheckCircle, 
  XCircle, 
  Clock, 
  Brain, 
  Trophy,
  RotateCcw,
  ArrowRight
} from "lucide-react";
import { useNavigate } from "react-router-dom";

// Mock quiz data - In production, this would be AI-generated
const mockQuiz = {
  id: "daily-quiz-" + new Date().toISOString().split('T')[0],
  title: "Daily Math & Physics Challenge",
  timeLimit: 900, // 15 minutes in seconds
  questions: [
    {
      id: 1,
      subject: "Mathematics",
      topic: "Functions",
      question: "What is the derivative of f(x) = 3x² + 2x - 1?",
      options: [
        "6x + 2",
        "6x² + 2x",
        "3x + 1",
        "6x - 1"
      ],
      correctAnswer: 0,
      explanation: "Using the power rule: d/dx(3x²) = 6x, d/dx(2x) = 2, d/dx(-1) = 0. Therefore, f'(x) = 6x + 2."
    },
    {
      id: 2,
      subject: "Physics",
      topic: "Dynamics",
      question: "A 5kg object is accelerating at 2m/s². What force is applied?",
      options: [
        "10 N",
        "7 N",
        "2.5 N",
        "25 N"
      ],
      correctAnswer: 0,
      explanation: "Using Newton's second law: F = ma = 5kg × 2m/s² = 10N."
    },
    {
      id: 3,
      subject: "Mathematics",
      topic: "Limits",
      question: "What is lim(x→0) (sin(x)/x)?",
      options: [
        "1",
        "0",
        "∞",
        "undefined"
      ],
      correctAnswer: 0,
      explanation: "This is a standard limit in calculus. lim(x→0) (sin(x)/x) = 1."
    }
  ]
};

export default function DailyQuizPage() {
  const navigate = useNavigate();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);
  const [showResults, setShowResults] = useState(false);
  const [timeLeft, setTimeLeft] = useState(mockQuiz.timeLimit);
  const [quizStarted, setQuizStarted] = useState(false);

  // Timer countdown
  useEffect(() => {
    if (quizStarted && timeLeft > 0 && !showResults) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && !showResults) {
      handleSubmitQuiz();
    }
  }, [timeLeft, quizStarted, showResults]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNextQuestion = () => {
    if (currentQuestion < mockQuiz.questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      handleSubmitQuiz();
    }
  };

  const handleSubmitQuiz = () => {
    setShowResults(true);
  };

  const calculateScore = () => {
    const correct = selectedAnswers.filter((answer, index) => 
      answer === mockQuiz.questions[index].correctAnswer
    ).length;
    return {
      correct,
      total: mockQuiz.questions.length,
      percentage: Math.round((correct / mockQuiz.questions.length) * 100)
    };
  };

  const startQuiz = () => {
    setQuizStarted(true);
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setShowResults(false);
    setTimeLeft(mockQuiz.timeLimit);
    setQuizStarted(false);
  };

  if (!quizStarted) {
    return (
      <div className="min-h-screen bg-gradient-bg pb-20">
        <MobileHeader userName="Ahmed" userScore={2450} />
        
        <div className="p-4 max-w-md mx-auto">
          <Card className="p-6 text-center space-y-6">
            <div className="p-4 bg-primary/10 rounded-full w-20 h-20 mx-auto flex items-center justify-center">
              <Brain size={32} className="text-primary" />
            </div>
            
            <div className="space-y-2">
              <h1 className="text-2xl font-bold text-foreground">Daily AI Quiz</h1>
              <p className="text-muted-foreground">
                Today's personalized quiz generated by AI based on your learning progress
              </p>
            </div>

            <div className="space-y-3 text-left">
              <div className="flex items-center space-x-3">
                <Clock size={16} className="text-primary" />
                <span className="text-sm">Time Limit: 15 minutes</span>
              </div>
              <div className="flex items-center space-x-3">
                <Trophy size={16} className="text-primary" />
                <span className="text-sm">{mockQuiz.questions.length} Questions</span>
              </div>
              <div className="flex items-center space-x-3">
                <Brain size={16} className="text-primary" />
                <span className="text-sm">Math & Physics Topics</span>
              </div>
            </div>

            <Button 
              className="w-full h-12"
              onClick={startQuiz}
            >
              Start Quiz
            </Button>
          </Card>
        </div>
      </div>
    );
  }

  if (showResults) {
    const score = calculateScore();
    
    return (
      <div className="min-h-screen bg-gradient-bg pb-20">
        <MobileHeader userName="Ahmed" userScore={2450 + score.correct * 10} />
        
        <div className="p-4 max-w-md mx-auto space-y-6">
          <Card className="p-6 text-center space-y-6">
            <div className={`p-4 rounded-full w-20 h-20 mx-auto flex items-center justify-center ${
              score.percentage >= 70 ? 'bg-accent/10' : 'bg-destructive/10'
            }`}>
              {score.percentage >= 70 ? (
                <Trophy size={32} className="text-accent" />
              ) : (
                <XCircle size={32} className="text-destructive" />
              )}
            </div>
            
            <div className="space-y-2">
              <h1 className="text-2xl font-bold text-foreground">
                Quiz Completed!
              </h1>
              <p className="text-4xl font-bold text-primary">
                {score.percentage}%
              </p>
              <p className="text-muted-foreground">
                {score.correct} out of {score.total} correct
              </p>
            </div>

            <div className="space-y-3">
              <Button 
                className="w-full"
                onClick={() => navigate("/quiz-review")}
              >
                Review Answers <ArrowRight size={16} className="ml-2" />
              </Button>
              
              <Button 
                variant="outline"
                className="w-full"
                onClick={resetQuiz}
              >
                <RotateCcw size={16} className="mr-2" />
                Retake Quiz
              </Button>
            </div>
          </Card>

          {/* Quick Solutions Preview */}
          <Card className="p-4">
            <h3 className="font-semibold mb-3">Quick Review</h3>
            <div className="space-y-3">
              {mockQuiz.questions.map((question, index) => (
                <div key={question.id} className="flex items-center space-x-3 p-3 rounded-lg bg-muted/50">
                  {selectedAnswers[index] === question.correctAnswer ? (
                    <CheckCircle size={20} className="text-accent flex-shrink-0" />
                  ) : (
                    <XCircle size={20} className="text-destructive flex-shrink-0" />
                  )}
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium truncate">{question.topic}</p>
                    <p className="text-xs text-muted-foreground">{question.subject}</p>
                  </div>
                </div>
              ))}
            </div>
          </Card>
        </div>
      </div>
    );
  }

  const progress = ((currentQuestion + 1) / mockQuiz.questions.length) * 100;
  const currentQ = mockQuiz.questions[currentQuestion];

  return (
    <div className="min-h-screen bg-gradient-bg pb-20">
      <MobileHeader userName="Ahmed" userScore={2450} />
      
      <div className="p-4 max-w-md mx-auto space-y-6">
        {/* Progress Header */}
        <Card className="p-4 space-y-3">
          <div className="flex justify-between items-center">
            <span className="text-sm font-medium">
              Question {currentQuestion + 1} of {mockQuiz.questions.length}
            </span>
            <div className="flex items-center space-x-2">
              <Clock size={16} className="text-primary" />
              <span className="text-sm font-medium text-primary">
                {formatTime(timeLeft)}
              </span>
            </div>
          </div>
          <Progress value={progress} className="h-2" />
        </Card>

        {/* Question Card */}
        <Card className="p-6 space-y-6">
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <span className="text-xs font-medium text-primary bg-primary/10 px-2 py-1 rounded">
                {currentQ.subject}
              </span>
              <span className="text-xs text-muted-foreground">
                {currentQ.topic}
              </span>
            </div>
            <h2 className="text-lg font-semibold leading-relaxed">
              {currentQ.question}
            </h2>
          </div>

          <div className="space-y-3">
            {currentQ.options.map((option, index) => (
              <Button
                key={index}
                variant={selectedAnswers[currentQuestion] === index ? "default" : "outline"}
                className="w-full h-auto p-4 text-left justify-start"
                onClick={() => handleAnswerSelect(index)}
              >
                <div className="flex items-center space-x-3">
                  <div className={`w-6 h-6 rounded-full border-2 flex items-center justify-center ${
                    selectedAnswers[currentQuestion] === index 
                      ? 'bg-primary border-primary text-primary-foreground' 
                      : 'border-border'
                  }`}>
                    <span className="text-sm font-medium">
                      {String.fromCharCode(65 + index)}
                    </span>
                  </div>
                  <span className="flex-1">{option}</span>
                </div>
              </Button>
            ))}
          </div>
        </Card>

        {/* Navigation */}
        <div className="flex space-x-3">
          <Button
            variant="outline"
            className="flex-1"
            disabled={currentQuestion === 0}
            onClick={() => setCurrentQuestion(currentQuestion - 1)}
          >
            Previous
          </Button>
          <Button
            className="flex-1"
            disabled={selectedAnswers[currentQuestion] === undefined}
            onClick={handleNextQuestion}
          >
            {currentQuestion === mockQuiz.questions.length - 1 ? 'Submit' : 'Next'}
            <ArrowRight size={16} className="ml-2" />
          </Button>
        </div>
      </div>
    </div>
  );
}